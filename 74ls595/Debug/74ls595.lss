
74ls595.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000013e  000001b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         0000078c  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000007e0  00000000  00000000  00000944  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e3       	ldi	r30, 0x3E	; 62
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#include <avr/io.h>
#include <util/delay.h>

#include "shift_register.h"

int main(void) {
  96:	cf 92       	push	r12
  98:	df 92       	push	r13
  9a:	ef 92       	push	r14
  9c:	ff 92       	push	r15
  9e:	1f 93       	push	r17
  a0:	df 93       	push	r29
  a2:	cf 93       	push	r28
  a4:	00 d0       	rcall	.+0      	; 0xa6 <main+0x10>
  a6:	00 d0       	rcall	.+0      	; 0xa8 <main+0x12>
  a8:	0f 92       	push	r0
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
	uint8_t Number0[5]={ 0x0, 0xF8, 0x88, 0xF8, 0x0,};
	uint8_t Number1[5]={ 0x0, 0x48, 0xF8, 0x08, 0x0,};
	uint8_t Number2[5]={ 0x0, 0xB8, 0xA8, 0xE8, 0x0,};
	uint8_t Number3[5]={ 0x0, 0xA8, 0xA8, 0xF8, 0x0,};
	uint8_t Number4[5]={ 0x0, 0xE0, 0x20, 0xF8, 0x20,};
	uint8_t Number5[5]={ 0x0, 0xE8, 0xA8, 0xB8, 0x0,};
  ae:	de 01       	movw	r26, r28
  b0:	11 96       	adiw	r26, 0x01	; 1
  b2:	e0 e0       	ldi	r30, 0x00	; 0
  b4:	f1 e0       	ldi	r31, 0x01	; 1
  b6:	85 e0       	ldi	r24, 0x05	; 5
  b8:	01 90       	ld	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	81 50       	subi	r24, 0x01	; 1
  be:	e1 f7       	brne	.-8      	; 0xb8 <main+0x22>
	uint8_t Number9[5]={ 0x0, 0xE8, 0xA8, 0xF8, 0x0,};
	uint8_t NumberC[5]={ 0x0, 0x0, 0x50, 0x0, 0x0,};

	//Initialize HC595 system

	HC595Init();
  c0:	0e 94 7d 00 	call	0xfa	; 0xfa <HC595Init>
  c4:	10 e0       	ldi	r17, 0x00	; 0

	while (1) {
		for (uint8_t i = 0; i < 5; i++) {
			HC595Write(Number5[i]);   //Write the data to HC595
  c6:	6e 01       	movw	r12, r28
  c8:	08 94       	sec
  ca:	c1 1c       	adc	r12, r1
  cc:	d1 1c       	adc	r13, r1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ce:	80 e9       	ldi	r24, 0x90	; 144
  d0:	e8 2e       	mov	r14, r24
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	f8 2e       	mov	r15, r24
  d6:	f6 01       	movw	r30, r12
  d8:	e1 0f       	add	r30, r17
  da:	f1 1d       	adc	r31, r1
  dc:	80 81       	ld	r24, Z
  de:	0e 94 8d 00 	call	0x11a	; 0x11a <HC595Write>
  e2:	88 ee       	ldi	r24, 0xE8	; 232
  e4:	93 e0       	ldi	r25, 0x03	; 3
  e6:	f7 01       	movw	r30, r14
  e8:	31 97       	sbiw	r30, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <main+0x52>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ec:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ee:	d9 f7       	brne	.-10     	; 0xe6 <main+0x50>
	//Initialize HC595 system

	HC595Init();

	while (1) {
		for (uint8_t i = 0; i < 5; i++) {
  f0:	1f 5f       	subi	r17, 0xFF	; 255
  f2:	15 30       	cpi	r17, 0x05	; 5
  f4:	80 f3       	brcs	.-32     	; 0xd6 <main+0x40>
  f6:	10 e0       	ldi	r17, 0x00	; 0
  f8:	ee cf       	rjmp	.-36     	; 0xd6 <main+0x40>

000000fa <HC595Init>:
 ****************************************/

//Initialize HC595 System
void HC595Init() {
	//Make the Data(DS), Shift clock (SH_CP), Store Clock (ST_CP) lines output
	sbi(LS595_DDR, LS595_DS_POS);
  fa:	52 9a       	sbi	0x0a, 2	; 10
	sbi(LS595_DDR, LS595_SH_CP_POS);
  fc:	53 9a       	sbi	0x0a, 3	; 10
	sbi(LS595_DDR, LS595_ST_CP_POS);
  fe:	54 9a       	sbi	0x0a, 4	; 10
}
 100:	08 95       	ret

00000102 <HC595Pulse>:
#define LS595DataLow() cbi(LS595_PORT,LS595_DS_POS)

//Sends a clock pulse on SH_CP line
void HC595Pulse() {
	//Pulse the Shift Clock
	sbi(LS595_PORT, LS595_SH_CP_POS);
 102:	5b 9a       	sbi	0x0b, 3	; 11
	cbi(LS595_PORT, LS595_SH_CP_POS);
 104:	5b 98       	cbi	0x0b, 3	; 11
}
 106:	08 95       	ret

00000108 <HC595Latch>:

//Sends a clock pulse on ST_CP line
void HC595Latch() {
	//Pulse the Store Clock

	sbi(LS595_PORT, LS595_ST_CP_POS);
 108:	5c 9a       	sbi	0x0b, 4	; 11
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	98 2f       	mov	r25, r24
 10e:	9a 95       	dec	r25
 110:	f1 f7       	brne	.-4      	; 0x10e <HC595Latch+0x6>
	_delay_loop_1(1);

	cbi(LS595_PORT, LS595_ST_CP_POS);
 112:	5c 98       	cbi	0x0b, 4	; 11
 114:	8a 95       	dec	r24
 116:	f1 f7       	brne	.-4      	; 0x114 <HC595Latch+0xc>
	_delay_loop_1(1);
}
 118:	08 95       	ret

0000011a <HC595Write>:
 Description:
 The byte is serially transfered to 74HC595
 and then latched. The byte is then available on
 output line Q0 to Q7 of the HC595 IC.
 */
void HC595Write(uint8_t data) {
 11a:	90 e0       	ldi	r25, 0x00	; 0

	//Order is MSB first
	for (uint8_t i = 0; i < 8; i++) {
		//Output the data on DS line according to the
		//Value of MSB
		if (data & 0b10000000) {
 11c:	87 ff       	sbrs	r24, 7
 11e:	02 c0       	rjmp	.+4      	; 0x124 <HC595Write+0xa>
			//MSB is 1 so output high

			LS595DataHigh();
 120:	5a 9a       	sbi	0x0b, 2	; 11
 122:	01 c0       	rjmp	.+2      	; 0x126 <HC595Write+0xc>
		} else {
			//MSB is 0 so output high
			LS595DataLow();
 124:	5a 98       	cbi	0x0b, 2	; 11
#define LS595DataLow() cbi(LS595_PORT,LS595_DS_POS)

//Sends a clock pulse on SH_CP line
void HC595Pulse() {
	//Pulse the Shift Clock
	sbi(LS595_PORT, LS595_SH_CP_POS);
 126:	5b 9a       	sbi	0x0b, 3	; 11
	cbi(LS595_PORT, LS595_SH_CP_POS);
 128:	5b 98       	cbi	0x0b, 3	; 11
 */
void HC595Write(uint8_t data) {
	//Send each 8 bits serially

	//Order is MSB first
	for (uint8_t i = 0; i < 8; i++) {
 12a:	9f 5f       	subi	r25, 0xFF	; 255
 12c:	98 30       	cpi	r25, 0x08	; 8
 12e:	11 f0       	breq	.+4      	; 0x134 <HC595Write+0x1a>
			//MSB is 0 so output high
			LS595DataLow();
		}

		HC595Pulse();  //Pulse the Clock line
		data = data << 1;  //Now bring next bit at MSB position
 130:	88 0f       	add	r24, r24
 132:	f4 cf       	rjmp	.-24     	; 0x11c <HC595Write+0x2>

	}

	//Now all 8 bits have been transferred to shift register
	//Move them to output latch at one
	HC595Latch();
 134:	0e 94 84 00 	call	0x108	; 0x108 <HC595Latch>
}
 138:	08 95       	ret

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
